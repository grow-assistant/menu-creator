// Package seeding provides functionality for generating Go seed files from menu data
package seeding

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
	"time"

	"github.com/grow-assistant/menu-creator/internal/models"
)

const seedFileTemplate = `// Code generated by menu-creator. DO NOT EDIT.
// Source: {{ .SourceFile }}
// Generated: {{ .Timestamp }}
// Location: {{ .Location.Name }}

package seeding

import (
	"github.com/grow-assistant/menu-creator/internal/models"
)

// Create{{ .LocationID }} generates seed data for {{ .Location.Name }} location
// This includes all menus, categories, items, and their options
func Create{{ .LocationID }}() *models.Location {
	// Create location
	location := models.CreateLocation("{{ .Location.Name }}", "{{ .Location.Address }}")

	{{ range .Location.Menus }}
	// Create menu: {{ .Name }}
	menu := models.CreateMenu("{{ .Name }}", "{{ .Name }}", location.ID)
	location.Menus = append(location.Menus, *menu)

	{{ range .Categories }}
	// Create category: {{ .Name }}
	category := models.CreateCategory("{{ .Name }}", "{{ .Description }}", menu.ID)
	menu.Categories = append(menu.Categories, *category)

	{{ range sortItems .Items }}
	// Create item: {{ .Name }}
	item := models.CreateItem(
		"{{ .Name }}",
		{{ if .Description }}"{{ .Description }}"{{ else }}""{{ end }},
		{{ .Price }},
		category.ID,
	)
	category.Items = append(category.Items, *item)

	{{ range .Options }}
	// Add options for {{ .Name }}
	option := models.CreateOption(
		"{{ .Name }}",
		"{{ .Description }}",
		{{ .MinSelect }},
		{{ .MaxSelect }},
		item.ID,
		[]models.OptionItem{
			{{ range sortOptionItems .Items }}
			{
				Name:        "{{ .Name }}",
				Description: "{{ .Description }}",
				Price:       {{ .Price }},
			},
			{{ end }}
		},
	)
	item.Options = append(item.Options, *option)
	{{ end }}
	{{ end }}
	{{ end }}
	{{ end }}

	return location
}`

type seedData struct {
	SourceFile  string
	Timestamp   string
	LocationID  string
	Location    *models.Location
}

// sortItems sorts menu items alphabetically by name
func sortItems(items []models.MenuItem) []models.MenuItem {
	sorted := make([]models.MenuItem, len(items))
	copy(sorted, items)
	sort.Slice(sorted, func(i, j int) bool {
		return sorted[i].Name < sorted[j].Name
	})
	return sorted
}

// sortOptionItems sorts option items alphabetically by name
func sortOptionItems(items []models.OptionItem) []models.OptionItem {
	sorted := make([]models.OptionItem, len(items))
	copy(sorted, items)
	sort.Slice(sorted, func(i, j int) bool {
		return sorted[i].Name < sorted[j].Name
	})
	return sorted
}

// ExportToSeedFile generates a Go seed file from a Location model
func ExportToSeedFile(location *models.Location, sourcePDF, outputPath string) error {
	// Create output directory if it doesn't exist
	if err := os.MkdirAll(filepath.Dir(outputPath), 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	// Prepare template data
	data := seedData{
		SourceFile:  filepath.Base(sourcePDF),
		Timestamp:   time.Now().Format("2006-01-02 15:04:05"),
		LocationID:  strings.Title(strings.ReplaceAll(location.ID, "-", "")),
		Location:    location,
	}

	// Create template with functions
	tmpl := template.New("seedFile").Funcs(template.FuncMap{
		"sortItems":      sortItems,
		"sortOptionItems": sortOptionItems,
	})

	// Parse template
	if _, err := tmpl.Parse(seedFileTemplate); err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}

	// Create output file
	file, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("failed to create seed file: %w", err)
	}
	defer file.Close()

	// Execute template
	if err := tmpl.Execute(file, data); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	return nil
}
